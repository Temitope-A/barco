// <auto-generated />
using BarcoRota.Client.Models;
using BarcoRota.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BarcoRota.Client.Migrations
{
    [DbContext(typeof(BarcoContext))]
    partial class BarcoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BarcoRota.Models.BarcoJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<int>("JobCapacity");

                    b.Property<int>("JobType");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<int>("WorkPackageId");

                    b.HasKey("Id");

                    b.HasIndex("WorkPackageId");

                    b.ToTable("BarcoJobs");
                });

            modelBuilder.Entity("BarcoRota.Models.BarcoMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("RotaStatus")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("BarcoMembers");
                });

            modelBuilder.Entity("BarcoRota.Models.BarcoShift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BarcoJobId")
                        .IsRequired();

                    b.Property<int?>("BarcoMemberId")
                        .IsRequired();

                    b.Property<int>("ShiftStatus");

                    b.HasKey("Id");

                    b.HasIndex("BarcoJobId");

                    b.HasIndex("BarcoMemberId");

                    b.ToTable("BarcoShifts");
                });

            modelBuilder.Entity("BarcoRota.Models.WorkPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ManagerId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("WorkPackages");
                });

            modelBuilder.Entity("BarcoRota.Models.BarcoJob", b =>
                {
                    b.HasOne("BarcoRota.Models.WorkPackage", "WorkPackage")
                        .WithMany("Jobs")
                        .HasForeignKey("WorkPackageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BarcoRota.Models.BarcoShift", b =>
                {
                    b.HasOne("BarcoRota.Models.BarcoJob", "BarcoJob")
                        .WithMany("Shifts")
                        .HasForeignKey("BarcoJobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BarcoRota.Models.BarcoMember", "BarcoMember")
                        .WithMany()
                        .HasForeignKey("BarcoMemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BarcoRota.Models.WorkPackage", b =>
                {
                    b.HasOne("BarcoRota.Models.BarcoMember", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
